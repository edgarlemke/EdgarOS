#ifndef __ARCH_x86_64_IDT_LD_PP__
#define __ARCH_x86_64_IDT_LD_PP__ 1


#define IDT64_INT_DESC( offset, selector, access ) \
  SHORT(offset & 0x0000ffff); \
  SHORT(selector); \
  BYTE(0); \
  BYTE(access); \
  SHORT(offset >> 16); \
  LONG(offset >> 32); \
  LONG(0);


/* default IDT for x86-64 architecture */
. = ALIGN(4);
IDT64 = .;
  IDT64_INT_DESC( isr_0x00, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x01, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x02, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x03, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x04, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x05, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x06, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x07, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x08, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x09, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x0a, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x0b, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x0c, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x0d, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x0e, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x0f, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x10, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x11, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x12, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x13, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x14, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x15, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x16, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x17, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x18, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x19, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x1a, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x1b, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x1c, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x1d, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x1e, 0x08, 0x8e );
  IDT64_INT_DESC( isr_0x1f, 0x08, 0x8e );
_IDT64_END = .;

/* IDT descriptor for lidt */
IDT64_DESC = .;
  SHORT(_IDT64_END - IDT64); LONG(IDT64); LONG(IDT64 >> 32);


#endif
